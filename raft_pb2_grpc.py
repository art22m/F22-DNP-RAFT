# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import raft_pb2 as raft__pb2


class RaftServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.request_vote = channel.unary_unary(
                '/RaftService/request_vote',
                request_serializer=raft__pb2.VoteRequest.SerializeToString,
                response_deserializer=raft__pb2.VoteReply.FromString,
                )
        self.append_entries = channel.unary_unary(
                '/RaftService/append_entries',
                request_serializer=raft__pb2.AppendRequest.SerializeToString,
                response_deserializer=raft__pb2.AppendReply.FromString,
                )
        self.set_val = channel.unary_unary(
                '/RaftService/set_val',
                request_serializer=raft__pb2.SetRequest.SerializeToString,
                response_deserializer=raft__pb2.SetReply.FromString,
                )
        self.get_val = channel.unary_unary(
                '/RaftService/get_val',
                request_serializer=raft__pb2.GetRequest.SerializeToString,
                response_deserializer=raft__pb2.GetReply.FromString,
                )
        self.get_leader = channel.unary_unary(
                '/RaftService/get_leader',
                request_serializer=raft__pb2.EmptyMessage.SerializeToString,
                response_deserializer=raft__pb2.GetLeaderReply.FromString,
                )
        self.suspend = channel.unary_unary(
                '/RaftService/suspend',
                request_serializer=raft__pb2.SuspendRequest.SerializeToString,
                response_deserializer=raft__pb2.EmptyMessage.FromString,
                )


class RaftServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def request_vote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def append_entries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_val(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_val(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_leader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def suspend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RaftServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'request_vote': grpc.unary_unary_rpc_method_handler(
                    servicer.request_vote,
                    request_deserializer=raft__pb2.VoteRequest.FromString,
                    response_serializer=raft__pb2.VoteReply.SerializeToString,
            ),
            'append_entries': grpc.unary_unary_rpc_method_handler(
                    servicer.append_entries,
                    request_deserializer=raft__pb2.AppendRequest.FromString,
                    response_serializer=raft__pb2.AppendReply.SerializeToString,
            ),
            'set_val': grpc.unary_unary_rpc_method_handler(
                    servicer.set_val,
                    request_deserializer=raft__pb2.SetRequest.FromString,
                    response_serializer=raft__pb2.SetReply.SerializeToString,
            ),
            'get_val': grpc.unary_unary_rpc_method_handler(
                    servicer.get_val,
                    request_deserializer=raft__pb2.GetRequest.FromString,
                    response_serializer=raft__pb2.GetReply.SerializeToString,
            ),
            'get_leader': grpc.unary_unary_rpc_method_handler(
                    servicer.get_leader,
                    request_deserializer=raft__pb2.EmptyMessage.FromString,
                    response_serializer=raft__pb2.GetLeaderReply.SerializeToString,
            ),
            'suspend': grpc.unary_unary_rpc_method_handler(
                    servicer.suspend,
                    request_deserializer=raft__pb2.SuspendRequest.FromString,
                    response_serializer=raft__pb2.EmptyMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RaftService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RaftService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def request_vote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RaftService/request_vote',
            raft__pb2.VoteRequest.SerializeToString,
            raft__pb2.VoteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def append_entries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RaftService/append_entries',
            raft__pb2.AppendRequest.SerializeToString,
            raft__pb2.AppendReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_val(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RaftService/set_val',
            raft__pb2.SetRequest.SerializeToString,
            raft__pb2.SetReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_val(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RaftService/get_val',
            raft__pb2.GetRequest.SerializeToString,
            raft__pb2.GetReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_leader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RaftService/get_leader',
            raft__pb2.EmptyMessage.SerializeToString,
            raft__pb2.GetLeaderReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def suspend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RaftService/suspend',
            raft__pb2.SuspendRequest.SerializeToString,
            raft__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
